diff --git a/CoreLogic.rb b/CoreLogic.rb
index 80eeb23..17bc0e7 100644
--- a/CoreLogic.rb
+++ b/CoreLogic.rb
@@ -1,4 +1,4 @@
-#!/usr/bin/env ruby
+g#!/usr/bin/env ruby
 # coding: utf-8
 
 require 'date'
@@ -26,182 +26,102 @@ Teiin = 2
 #
 #-----------------
 #
-=begin # mved to Helper
-#  27 lines skipped
-=end
 
 #  -- set last 4 days of prev month 
 #  def prepare(idx, prevdays=' '*4, nvotAvail={})
 # 
 
-
 class Yotei
 
-#=== 'include './View'' ===#
-#=== including < view.rb > ===
-# 'module View'
-#
-#  For Views
-  #
+#=== 'include './TestHelper'' ===#
+#=== including < test_helper.rb > ===
+# coding: utf-8
+# 'module TestHelper'
 
-  #..........................
-#  def color_str(filled)      
-  def set_AttrStr( filled )    # for line check
-  #...........................
-##    puts "# def set_AttrStr( '#{filled}' )"
-  # 
-    # filled number (nomal 2)
-    case filled
-    when 2
-      color_str = color_str( filled.to_s, "NORMAL" )
-    when 1
-      color_str = color_str( filled.to_s, "RED" )
-    when 3
-      color_str = color_str( filled.to_s, "RED,BLINK" )
-    when 4, 0
-      color_str = color_str( filled.to_s, "RED" )
-    end
-  end
-  
-  #..........................
-  def color_str(str, color='')
-  #...........................
-#    puts "# def color_str(#{str}, #{color})"
-    attr=""
-#    puts "# color #{color}"
-    color.split(',').each {|c|
-#      puts "## each attr '#{c}'"
-      case c
-      when 'RED'
-        c_str ='31'
-      when 'GREEN'
-        c_str ='32'      
-      when 'YELLOW'
-        c_str ='33'
-      when 'MAGENTA'
-        c_str = '35'
-      when 'NORMAL'
-        c_str='0'
-      when 'BLINK'
-        c_str='5'
-      else
-        c_str='34'
-      end
-      attr += c_str + ';'
+  def test_data()
+    #xxx[0]="0123|4..................................."
+    a = []
+    ar=[]
+    a[0]  ="XXX  XXX  XXX  XXX  XXX  XXX  XXX  XXX  XXX"
+    a[1]  ="  XXX  XXX  XXX  XXX  XXX  XXX  XXX  XXX  XXX"
+    a[2]  ="   XXX  XXX  XXX  XXX  XXX  XXX  XXX  XXX  XXX"
+    a[3]  =" DDx  DDDD   DDDD   DDDD   DDDD   DDDD   DDD"
+#    a[3]  =" XXX  XXX  XXX  XXX  XXX  XXX  XXX  XXX  XXX"
+    (0..3).each {|x|
+      p a[x]
+      ar[x] = a[x].split("")
+      p "==>",ar[x]
+      @wrkdays[x]=ar[x]
     }
-    attr.chop!     # delet last cahr ;
-  #      print "## attr ='", attr, "'\n"
-    ret  = "\033[" + attr + 'm' + str + "\033[0m"
-   #     print "## attr End ='", ret, "'\n"
-   #  ret
+    puts
+    p @wrkdays
   end
 
-  #.............................
-  def hor_show(chk_members=[0,1,2,3], checkview=true)
-  #.............................
-    puts "# def hor_show( #{chk_members}, #{checkview} )"
-    # for Header & Guide
-    if checkview
-#      itemName2= "        |"
-      hdrDay   = "        |"
-      hdrMonth = "  Date  |"
-      hdr=". "*4 + "|16. . . 20. . . . , . . "    # until 28th
-      (28..@num_days16).each {|d|
-        if d == 30
-          if d != @num_days16
-            hdr=hdr + d.to_s
-          else
-            hdr=hdr + '+ '
-          end
-        else
-          hdr=hdr + '. '
-        end
-      }
-      #   puts "16--31  '#{hdr}'"
-      hdr=hdr+ "1 . . . + . . . . 10. . . . 15"
-      guide= (' 1'..' 9').to_a.join + ' + '
-      guide[0]=''
-      guide= ". . . . |" + guide*3 +'.'
-      #  when Smafo
-#      puts guide
-#      puts hdr
-      #  when PC
-      puts ' ' * hdrDay.length + guide
-# ??      puts  "Here  #{(  4 + @num_days16 - 16  - @num_days16.to_s.length )}"
-      strPrevMonth = '+-' *  4 + '|' #
-      strPrevMonth += '+-' * ( @num_days16 - 15 )
-                               #     puts "'#{strPrevMonth}'  #{strPrevMonth.length}   strPrevmaon Len" 
-#      strPrevMonth = strPrevMonth
-#      strMonth = " " + @month_16.to_s + " "
-#      centerPos = ( strPrevMonth.length - strMonth.length ) / 2
-#      t = strMonth.slice(0, centerPos - 1) + strMonth
-#      t = ( strPrevMonth.length - t.length )
-
-      nextMonth = Date.new(@year_16, @month_16, 28) + 28
-#      nextMonth.month
-      puts hdrMonth + strPrevMonth + "<<---  " + nextMonth.month.to_s + " ----"
-      puts hdrDay + hdr
-      #
-    end
-    #
-    filler = '_'
-    chk_members.each do |idx|
-      # 4 days of prevMonth to Ref
-      kinmuM = @wrkdays[idx][0..3].join(filler)
-      # this month
-      dat = @wrkdays[idx][4... 4+@num_days16].join(filler)
-      kinmuM = kinmuM + '_|' + dat + filler
-      #      puts kinmuM                       # Smafo
-      puts "  No. #{idx} |" + kinmuM      # PC
+  def testMain()
+    presetKoyano(3)
+    if ! are_you_ok?('continue? Y/N')
+      exit 1
     end
-    if checkview
-      dat = ' '
-      (0..34).each {|nday|
-        @check_info[:daycheck][nday] = cnt_filled(nday, chk_members)
-        @check_info[:dayview][nday] = checked_str( @check_info[:daycheck][nday] )
-      }
-      dat = @check_info[:dayview][0..3].join(filler) + '_|'
-      dat = dat + @check_info[:dayview][4... 4+@num_days16].join(filler)
-#      puts dat                      # when Smafo
-      puts " check  |#{dat}"    # when PC
+    adjust(0)
+  end
+#== END #===
+#'end'  ===#
+#[ end  # of module
+
+#=== << test_helper.rb >> included
+#=== 'include './FakeSystem'' ===#
+#=== including < fake_system.rb > ===
+# coding: utf-8
+
+# 'module FakeSystem'
+  #-----------------------------
+  def save_Case(isInitState=false)
+    #-----------------------------
+    puts "# save_Case  size #{@isInitState}"    
+    if isInitState
+      @initCase=Marshal.dump( @wrkdays )
+    else
+      @prevCase = Marshal.dump( @wrkdays )
     end
-  end  
+    #    @serCase << @preCase
+  end
   
-  #.............................
-  def ver_show(chk_members=[0,1,2,3],   checkview=true)
-  #.............................
-    puts "# def ver_show( #{chk_members}, #{checkview} )"
-    chk_members.each do |worker|
-      if ! (0...@num_workers).include?( worker )
-        puts "Unkown worker index #{worker} : expected (0 .. #{@num_workers} )"
-        exit 1
-      end
-    end
-    (0..34).each do |nth_day|
-      if nth_day == 4
-        puts '  ==|=================='
+  #-----------------------------
+  #  def load_Case(saveNow=false)
+  def load_Case(isInitState=false)
+    #----------------------------
+    puts "#  load_Case(#{isInitState})"
+    if isInitState
+      if @initCase
+        @wrkdays = Marshal.load(@initCase)
       end
-      printf " %2d ", nth_day
-      canv =[]
-      chk_members.each { |worker|
-        canv << @wrkdays[worker][nth_day]
-      }
-      canv= '|__' + canv.join("___")
-      + '___'
-      if checkview == true
-        cnt = cnt_filled( nth_day, chk_members ) # - @num_workers)
-        canv = canv + "|  [" + checked_str(cnt) +  "]"
+    else             
+      if @prevCase
+        @wrkdays = Marshal.load(@prevCase)
       end
-      
-      puts "" + canv
     end
+    return
+    print  "# load_Case "
+    if ! @serCase.empty?
+      puts " size #{@serCase.size}"
+      #=begin      
+      #      if saveNow
+      #        nowCase=Marshal.dump( @wrkdays )
+      #      end
+      @wrkdays = Marshal.load(@serCase.pop)
+      #
+      #      if saveNow
+      #        @serCase << nowCase
+      #      end
+      #=end
+    end
+    puts ''
   end
-  
-#   
+
 #== END #===
-'end'  ===#
+#'end'  ===#
 #[ end  # of module
-#=== << view.rb >> included
+#=== << fake_system.rb >> included
 #=== 'include './ControlHelper'' ===#
 #=== including < control_helper.rb > ===
 # 'module ControlHelper'
@@ -212,31 +132,85 @@ class Yotei
 #     ' ' : free
 #     'x' : kinmu
 #     'D' : Dame (antherplace Kinmu)
-#     'u' : Zantei temp kinmu           # changable
-#     'y','Y' : Yukyu
+#     '*' : Off Day           # changable
+#     'A','B' :  OnDay ( Shift ) 
 #     'X' : Upper case fixed
 # 
-# check value of 
-# not use  [@num_workers (for check)][0..34],
-#     but   ==> @check_info[:daycheck] 
-#     '2' : ok
-#     '3' : Err over 
-#     '0' : Err under
-#     '1' : ''  under
-#     
-#................
-#  Counter of Kuujitu, Kinmu
-#   @check_info{}
-#       :ake    [0...@num_workers]
-#       :kokyu  [0...@num_workers]
-#       :kinmu  [0...@num_workers]
-#       :day    [0...31+4]
-#       :daycheck  [0..31+4]
-#       :dayview   [0..31+4]
 #................
-  $onDay = 'x'
-  $offDat = ' '
-  $reserved = 'D'
+  #----- Initailze -------  
+  def init_InitVarCon(members, date)
+  #-----------------------
+    #--- Constant ----
+    @num_workers = members
+    @num_workers_p_day = 2            # Teiin
+    #
+    @template=('xxx  '*8).split('')
+    #--- Date ---- 
+    if date.day < 7
+      @month_16= date.month
+      @year_16 = date.year
+    else
+      @month_16=date.next_month.month
+      @year_16 = date.next_month.year
+    end
+ #
+    # 
+    @num_days16= daysOfMonth(@year_16, @month_16)
+    @wday_16 = Date.new(@year_16, @month_16, 16).wday
+
+    puts " This has #{@num_workers} members"
+    puts " Taiin = #{@num_workers_p_day}"
+    puts " #{@year_16}-#{@month_16} has #{@num_days16} days."
+    puts "           #{@month_16}-16  #{%w(Su Mo Tu We Th Fr Sa)[@wday_16]}(#{@wday_16}) "
+    #
+    define_OnOff_Day()    # define  the Day to work / not   # yOn, Off
+    
+    #
+    #  view and control # separate?!
+    #   @viewsdays=Array.new( @num_workers + 1, Array.new(35, ' ') )
+    #   @cnt_checks=Array.new( @num_workers - 1, Array.new(2, 0) )
+
+
+    # === Working Data ===    
+    @wrkdays=Array.new( @num_workers + 1, Array.new(35, ' ') )
+    
+    # === Data ====
+    # check info & views
+=begin    
+#    @check_info=Hash.new()
+#    #  Worker Check
+    
+#    @check_info[:OnDay]=[0...@num_workers]
+#    @check_info[:OnDayAll]=[0...@num_workers]
+#    @check_info[:OffDay]=[0...@num_workers]
+#    @check_info[:FullOffDay]=[0...@num_workers]
+
+#    #  Place check  
+#    @check_info[:day]=[0...@num_workers]
+#    @check_info[:daycheck]=[0...31+4]
+#    @check_info[:isOK]=[0...31+4]
+=end
+ 
+    ## status  for each worker
+    @chk_workers={}
+    @chk_workers[:OnDay]=Array.new( @num_workers )
+    @chk_workers[:OnDayAll]=Array.new( @num_workers )   # including workdays of other places 
+    @chk_workers[:OffDay]=Array.new( @num_workers )
+    #   for view
+    @chk_workers[:FullOffDay]=Array.new( @num_workers )
+
+    ## status for Each day 
+    @chk_Place = {}
+    @chk_Place[:numDay]=Array.new( 31+4, 0 )
+    @chk_Place[:isOK]=Array.new( 31+4 , false)
+    #    for View ( show )
+    @chk_Place[:dayView]=Array.new( 31+4, ' ' )
+    #
+####    @check_info[:dayview]=[0...31+4]
+#
+#    @serCase=[]
+    
+  end
   
   #
   #----- Date --------
@@ -260,47 +234,84 @@ class Yotei
   def nextMonth(month=nil)
   end
 
-  #----- Initailze -------  
-  def init_InstVars(members, teiin, month=nil)
-    @numWorkersInPlace = teiin
-    @numofWorkersInPlace = members
-#    @month ||=  
-#      @foo ||= "bar"    'or equal'
-      
+
+  #
+  #  Constant 
+  #
+  #
+  #..................................
+  def define_OnOff_Day()
+  #..................................
+    # 'X", 'A', 'B'
+    @day_ON = 'XAB'
+    # ' ','*'                   
+    @day_OFF = ' *'
+    # 'X', 'A', 'B', and 'D'
+    @day_ON_ALL = "#{@day_ON}D"
+  end
+  #
+  #..................................
+  def isOffDay(day)   # Yaumi
+  #.................................
+    day =~ /^[ \*]$/        #  
+#    day =~ /^[#{@day_OFF}]$/        #
+  end
+
+  #..................................
+  def isFullOffDay(day)  # Koukyu #[-
+  #..................................
+#
+  end
+  
+  #.................................
+  def isOnDay(day)
+  #.................................
+    day =~ /^[#{@day_ON}]$/i   # XxAaBb   , Dd
+  end
+
+  #.................................
+  def isOnDayAll(day)     # All OnDay including other Place
+  #.................................
+    day =~ /^[#{@day_ON_ALL}]$/i   # xabdABD
+  end
+
+  def isFullOffDay(idx, day)
+#[-    
   end
+
   
   # 
   #.................................................
-  def start_p(yti)
+  def start_p( fourDays )
     #.................................................
-    if yti[3] == ' ' then    # _|
-      if yti[2] == ' ' then    #  0 1 2
+    if isOffDay( fourDays[3] )    # _|
+      if isOffDay( fourDays[2] )    #  0 1 2
         p_template=0              ##  __| X X X
       else
-        if yti[1] == ' '        # _x_| XXX
+        if isOffDay( fourDays[1] )     # _x_| XXX
           p_template=0
         else                    # xx_|
-          if yti[0] == ' '         ## _xx_| _XXX
+          if isOffDay( fourDays[0] )         ## _xx_| _XXX
             p_template=4
           else
             p_template=4           ## xxx_| _XXX
           end
         end
       end
-    else                     # x|
-      if yti[2] == ' '         # _x|
-        if yti[1] == ' '          # __x | XX__
+    else                        # x|
+      if isOffDay( fourDays[2] )         # _x|
+        if isOffDay( fourDays[1] )          # __x | XX__
           p_tmplate=1
         else                      # x_x |
-          if yti[0] == ' '
+          if isOffDay( fourDays[0] )
             p_tmplate=2            ## _x_x | X__ or XX_  ... 1
           else
             p_tmplate= 3           ## xx_x | __X or _X_  special
           end
         end
       else                     # xx|
-        if yti[1] == ' '          # _xx|
-          if yti[0]==' '
+        if isOffDay( fourDays[1] )          # _xx|
+          if isOffDay( fourDays[0] )
             p_tmplate= 2            ## __xx | X__ 
           else
             p_tmplate= 2            ## x_xx | X__   or _XXX   
@@ -312,6 +323,8 @@ class Yotei
     end
   end
 
+=begin  
+# Not Used ; 
   #...........................
   def stat_day(idx_day, chk_members=[0,1,2,3], views=false)
   #...........................
@@ -322,34 +335,38 @@ class Yotei
     } 
     ret
   end
-
+=end
+  
   #............................... 
-  def sr_offdays_array(idxWorker)
+  def get_OffDays(idxWorker)
   #...............................
     seqs_pos=[]
     num_seq=0
 
-    (1...@num_days16+4).each{|nth_day|
-      if @wrkdays[idxWorker][nth_day]==' '
+    (0..@num_days16+4).each{|nth_day|
+#      if @wrkdays[idxWorker][nth_day]==' '
+      if isOffDay( @wrkdays[idxWorker][nth_day] )
         num_seq+=1
       else
         if num_seq > 1
           seqs=(0...num_seq).map {|n|
             nth_day - n - 1
           }.sort
-#          p "seqs"
-#          p seqs
+#if @debug_           
+#          print "seqs '",  seqs, "'\n"
+#end          
           seqs_pos << seqs
           num_seq=0
         end
       end
     }
-    print "#... Off Seq ";seqs_pos
+##    print "#... Off Seq ";seqs_pos
     seqs_pos
   end
 
+=begin  
   #.............................
-  def add_OffDays(idxWorker, pos_OffDays)
+# yet  def add_OffDays(idxWorker, pos_OffDays)
   #.............................
     pos_OffDays.each {|offDays|
       offDays.each_with_index {|day, i|
@@ -361,50 +378,47 @@ class Yotei
     }
     p pos_OffDays
   end
-
+=end
+  
   #................................
-  def cnt_filled(idx_day, idx_workers=[0, 1, 2])
+  def cnt_filled(idx_day, idx_workers=[0, 1, 2, 3])
   #................................
+    # number of current worker Now
+    #    must be adjusted to @num_wokers_p_day
     cnt=0
     idx_workers.each{|w|
-##=begin when isDayOff is corrected
-##      if ! isDayOff(w, idx_day )
-##        cnt+=1
-##      end
-##=end
-      
-     case @wrkdays[w][idx_day]
- #     when ' ', '*'  # 'D',  'y', 'Y'
- #       ;
-      when 'x','X'
-#      else    # 'x' 'X'
-        cnt+=1
-      end
+      cnt += 1 if isOnDay( @wrkdays[w][idx_day] )
     }
     cnt
   end
 
-  #................................
-  def isDayOff(idxWorker, day)
-  #   return is 'the Day is OffDay'
-  #................................
-#puts "#    def isDayOff(#{idxWorker}, #{day})"
-    case @wrkdays[idxWorker] [ day ]
-    when'x', 'X'     #  OnDay ,   'D' is   
-      false
-    when 'D'
-      false #[-
-    else # ' '
-      true
-    end
-  end
-
-
+  
   #--------
   #  miscellaneous
   #--------
+# yet   
+  #.............................
+  def getData(prompt=':Quit/ ')
+    #.............................
+    if prompt[-1] == "\n"
+      prompt.chop!
+    end
+    if prompt =~ /:([A-Z])/
+      rep=[]
+      n=1
+#      while "$#{n}"
+#        
+#      end
+      while true
+        res = gets
+        break
+      end
+    end
+  end
 
+  #.............................
   def are_you_ok?(prompt='ok ? [y|n]:')
+  #.............................
     while true
       print prompt
       res = gets
@@ -416,12 +430,191 @@ class Yotei
       end
     end	
   end
-  
+
 #== END #===
-'end'  ===#
+#'end'  ===#
 #[ end  # of module
 
 #=== << control_helper.rb >> included
+#=== 'include './View'' ===#
+#=== including < view.rb > ===
+# 'module View'
+#
+#  For Views
+  #
+
+  #..........................
+#  def color_str(filled)      
+#  def set_AttrStr( num_filled )    # for line check
+  def str_Attr( num_filled )    # for line check
+  #...........................
+##    puts "# def set_AttrStr( '#{num_filled}' )"
+  # 
+    # number of filled (nomal 2)
+    case num_filled
+    when 2      # OK
+      color_str = color_str( num_filled.to_s, "NORMAL" )
+    when 1
+      color_str = color_str( num_filled.to_s, "RED" )
+    when 3
+      color_str = color_str( num_filled.to_s, "RED,BLINK" )
+    when 4, 0
+      color_str = color_str( num_filled.to_s, "RED" )
+    end
+  end
+  
+  #..........................
+  def color_str(str, color='')
+  #...........................
+#    puts "# def color_str(#{str}, #{color})"
+    attr=""
+#    puts "# color #{color}"
+    color.split(',').each {|c|
+#      puts "## each attr '#{c}'"
+      case c
+      when 'RED'
+        c_str ='31'
+      when 'GREEN'
+        c_str ='32'      
+      when 'YELLOW'
+        c_str ='33'
+      when 'MAGENTA'
+        c_str = '35'
+      when 'NORMAL'
+        c_str='0'
+      when 'BLINK'
+        c_str='5'
+      else
+        c_str='34'
+      end
+      attr += c_str + ';'
+    }
+    attr.chop!     # delet last cahr ;
+  #      print "## attr ='", attr, "'\n"
+    ret  = "\033[" + attr + 'm' + str + "\033[0m"
+   #     print "## attr End ='", ret, "'\n"
+   #  ret
+  end
+
+  #.............................
+  def hor_show(chk_members=[0,1,2,3], checkview=true)
+    #.............................
+    
+   puts "# def hor_show( #{chk_members}, #{checkview} )"
+    # for Header & Guide
+   if checkview
+#      itemName2= "        |"
+     hdrDay   = "        |"
+     hdrMonth = "  Date  |"
+     hdr=". "*4 + "|16. . . 20. . . . , . . "    # until 28th
+     (28..@num_days16).each {|d|
+       if d == 30
+         if d != @num_days16
+           hdr=hdr + d.to_s
+         else
+           hdr=hdr + '+ '
+         end
+       else
+         hdr=hdr + '. '
+       end
+     }
+     #   puts "16--31  '#{hdr}'"
+     hdr=hdr+ "1 . . . + . . . . 10. . . . 15"
+     guide= (' 1'..' 9').to_a.join + ' + '
+     guide[0]=''   #[-     
+     scale = " DayIdx |" + '0 1 2 3 |'
+     scale = scale + '4 5 6 7 8 9 0'
+     scale = scale + ' . . . . + . . . . 2'
+     scale = scale + ' . . . . + . . . . 3'
+     scale = scale + ' . . . . + .'
+     
+     guide = ". . . . |" + guide*3 +'.'
+     #  when Smafo
+     #      puts guide
+     #      puts hdr
+     #  when PC
+     puts ' ' * hdrDay.length + guide
+     # ??      puts  "Here  #{(  4 + @num_days16 - 16  - @num_days16.to_s.length )}"
+     strPrevMonth = '+-' *  4 + '|' #
+     strPrevMonth += '+-' * ( @num_days16 - 15 )
+     #     puts "'#{strPrevMonth}'  #{strPrevMonth.length}   strPrevmaon Len" 
+     #      strPrevMonth = strPrevMonth
+     #      strMonth = " " + @month_16.to_s + " "
+     #      centerPos = ( strPrevMonth.length - strMonth.length ) / 2
+     #      t = strMonth.slice(0, centerPos - 1) + strMonth
+     #      t = ( strPrevMonth.length - t.length )
+
+     nextMonth = Date.new(@year_16, @month_16, 28) + 28
+     #      nextMonth.month
+     puts hdrMonth + strPrevMonth + "<<---  " + nextMonth.month.to_s + " ----"
+     puts hdrDay + hdr
+     #
+   end
+    #
+   filler = '_'
+   chk_members.each do |idx|
+     # 4 days of prevMonth to Ref
+     kinmuM = @wrkdays[idx][0..3].join(filler)
+     # this month
+     dat = @wrkdays[idx][4... 4+@num_days16].join(filler)
+     kinmuM = kinmuM + '_|' + dat + filler
+     #      puts kinmuM                       # Smafo
+     puts "  No. #{idx} |" + kinmuM      # PC
+   end
+   if checkview
+     examine()
+           print "+ @chk_Place[:dayView] ='", @chk_Place[:dayView], "'\n"
+          print "+ @chk_Place[:dayView][0] ='", @chk_Place[:dayView][0], "'\n"
+          print "+ @chk_Place[:dayView][1] ='", @chk_Place[:dayView][1], "'\n"
+          print "+ @chk_Place[:dayView][2] ='", @chk_Place[:dayView][2], "'\n"
+           print "+ @chk_Place[:dayView][3] ='", @chk_Place[:dayView][3], "'\n"
+     
+     #              .join(filler) + '_|'
+     dat = @chk_Place[:dayView][0, 4].join(filler) + '_|'
+     
+     ##      print " @chk_Place[:dayView][4... 4+@num_days16] ='", @chk_Place[:dayView][4... 4+@num_days16] , "' \n"
+     dat = dat + @chk_Place[:dayView][4... 4+@num_days16].join(filler)
+     #      puts dat                      # when Smafo
+     puts " check  |#{dat}"    # when PC
+   end
+   puts scale
+  end  
+  
+  #.............................
+  def ver_show(chk_members=[0,1,2,3],   checkview=true)
+  #.............................
+    puts "# def ver_show( #{chk_members}, #{checkview} )"
+    chk_members.each do |worker|
+      if ! (0...@num_workers).include?( worker )
+        puts "Unkown worker index #{worker} : expected (0 .. #{@num_workers} )"
+        exit 1
+      end
+    end
+    (0..34).each do |nth_day|
+      if nth_day == 4
+        puts '  ==|=================='
+      end
+      printf " %2d ", nth_day
+      canv =[]
+      chk_members.each { |worker|
+        canv << @wrkdays[worker][nth_day]
+      }
+      canv= '|__' + canv.join("___")
+      + '___'
+      if checkview == true
+        cnt = cnt_filled( nth_day ) #  @num_workers)
+        canv = canv + "|  [" + str_Attr(cnt) +  "]"
+      end
+      
+      puts "" + canv
+    end
+  end
+  
+#   
+#== END #===
+#'end'  ===#
+#[ end  # of module
+#=== << view.rb >> included
   
   # date
   #  @month_16
@@ -435,14 +628,13 @@ class Yotei
   #  @wrkdays
   #  @cnt_hecks
   
-  #.................................................
-  def initialize(members=1, fakeDate=nil )
-  #.................................................
+  #................................
+  def initialize(members=4, fakeDate=nil )
+  #...............................
         # @month_16
     # @num_days16..[28/29/30/31]
 
     @debug_= 2
-#
 #    @debug_ = 3  # 0,1, 2
 
     if fakeDate != nil
@@ -450,156 +642,64 @@ class Yotei
       d.map!(&:to_i)
       p d
       date=Date.new(d[0], d[1], d[2])
-    else
-      # Honban
-      date=Date.today
-    end
-    #
-    #.... Set to Supose
-    #    t =Time.now
-    #    date=Date.new(t.year, t.month, t.day) # 2018, 12, 1)
-
-    #[- Honban --]
-    # date=Date.today
-#....
-    puts "tmp Today : #{date.year} #{date.month} #{date.day}\n\t#{date}"
-    #
-    if date.day < 7
-      @month_16= date.month
-      @year_16 = date.year
-    else
-      @month_16=date.next_month.month
-      @year_16 = date.next_month.year
+      puts "tmp Today : #{date.year} #{date.month} #{date.day}\n\t#{date}"
+    else
+      # Honban
+      date=Date.today
+      puts "Today : #{date.year} #{date.month} #{date.day}\n\t#{date}"
     end
     #
-    @num_days16= daysOfMonth(@year_16, @month_16)
-    @wday_16 = Date.new(@year_16, @month_16, 16).wday
-    
-#    @num_idx_days = @num_days16 + 15
-
-#    puts "@num_idx_days = @num_days16 + 15"
-#    puts "#{@num_idx_days} = #{@num_days16} + 15"
-#  exit
-#    if @debug_ > 0
-      puts " #{@year_16}-#{@month_16} has #{@num_days16} days."
-      puts "           #{@month_16}-16  #{%w(Su Mo Tu We Th Fr Sa)[@wday_16]}(#{@wday_16}) "
-#    end
-    #     @startday=Time.now # .month
-    @template=('xxx  '*8).split('')
-    @num_workers = members
-    
-#    if @debug_ > 0
-      puts " This has #{@num_workers} members" 
-#    end
-    
-      @wrkdays=Array.new( @num_workers + 1, Array.new(35, ' ') )
-    #[-  no use  
-    @viewsdays=Array.new( @num_workers + 1, Array.new(35, ' ') )
-    @cnt_checks=Array.new( @num_workers - 1, Array.new(2, 0) )
-    # check info & views
-    @check_info=Hash.new()
-    @check_info[:ake]=[0...@num_workers]
-    @check_info[:kokyu]=[0...@num_workers]
-    @check_info[:kinmu]=[0...@num_workers]
-    @check_info[:day]=[0...@num_workers]
-    @check_info[:daycheck]=[0...31+4]
-    @check_info[:dayview]=[0...31+4]
-#
-#    @dayStatus={}
-#    @dayStatus[:dayOn]=['X', 'x']      # On Job
-#    @dayStatus[:dayOff]=[' ', 'y']     # Off Job 
-    #    @dayStatus[:dayDame]=['D', 'Y']    # Not Availfor JOB
-    #
-    _OnDay = 'X'
-    _OffDay = ' '
-    _ReservedDay = 'D'
-
-    @daySpecifiers={}
-    @daySpecifiers[:OnDay]    = 'x'
-    @daySpecifiers[:OffDay]   = ' '
-    @daySpecifiers[:ReservedDay] = 'D'
-    @daySpecifiers[:FreeDay]   = ' '
-#    @daySpecifiers[:ERR] = 'D'
-    @daySpecifiers[:FreeDay]   = ' '
-
-    p @daySpecifiers
-=begin 
-#  7 lines skipped
-=end    
-
-    @daySpecifiers[:Defined] =  @daySpecifiers.keys.map{ |k|
-      @daySpecifiers[k]
-    }
-    #
-    @daySpecifiers[:Defined]
-    print "# daySpecifiers[:Defined] "; p @daySpecifiers[:Defined]
 
-    print " Org    "; p @daySpecifiers[:Defined]
-    @daySpecifiers[:Defined].flatten!
-    print " Fatten ";
-    @daySpecifiers[:Defined]
-    print " UNiq   ";
-    @daySpecifiers[:Defined].uniq!
-    p @daySpecifiers[:Defined]
+    init_InitVarCon(members, date)
 
-    
-    p @daySpecifiers[:CanAdds]
-    print "# @daySpecifiers[CanAdds] "; p @daySpecifiers[:CanAdds]
-    @daySpecifiers[:CanAdds] = @daySpecifiers[:Defined ]  -[  @daySpecifiers[:OnDay] ] # - @daySpecifiers[:ReservedDay]
-
-p "CanAdds ", @daySpecifiers[:CanAdds]                                                                                             
-        
-p "START include ? "
-    p @daySpecifiers[:Defined].include?('x')
-    p @daySpecifiers[:Defined].include?(' ')
-    p @daySpecifiers[:Defined].include?('D')
-    p @daySpecifiers[:Defined].include?('Y')
-    p " Check :Keys"
-    p @daySpecifiers.keys.include?(:FreeDay)
-    p @daySpecifiers.keys.include?(:OnDay)
-    days=[' ', 'x' ]
-    print " days[1]= '#{days}'"
-
-    days[1] = @daySpecifiers[:OnDay]
-    print " days[1]= '#{days[1]}'"
-    #
-    p @daySpecifiers[:Defined].include?(days[1])
+  end
 
-#    p " Check :Keys"
-#    p @daySpecifiers.keys.include?(:FreeDay)
-#    p @daySpecifiers.keys.include?(:OnDay)
-    
-    p "END include ? "
-    _symOnJob=[ 'X', 'x' ]
-    _symOnOther = [ 'D' ]
-    _symOnJobAll = _symOnJob + _symOnOther 
-    #
-    _symOffJob = [ ' ' ]
-#    _symOffJob =  _symOffJob.dup
-#    _symOffJobAll += 'D'
-    _symAll = _symOnJobAll + _symOffJob
-    print "# _symAll "; p _symAll
-    
-    _symCanAdd = _symAll - _symOnJobAll
-    print "# _symCanAdd "; p _symCanAdd
 
-=begin
-#  5 lines skipped
-=end
-    xx=' '
-#    if _symAll.include?(xx)
-      print "Corrrect Specifier ? '#{xx}'    :";p _symAll.include?(xx)
-      print "OnJob    :"; p _symOnJob.include?(xx)
-      print "OnJobAll :"; p _symOnJobAll.include?(xx)
-      print "Off Job  :"; p _symOffJob.include?(xx)
-      print "Can Add  :"; p _symCanAdd.include?(xx)
+  #------------------------
+  #  preparation
+  #................................
+   def presetKoyano(idxWorker, howTo=0) 
+    #..............................
+    #  howTo : how to Add OnDay
+    #         0 : OnDay set to lastday of seq 3 days
+    # not only weekly,
+    # but for General use
+    # suposed already set Dame Days
+    
+    puts "#  presetKoyano( #{idxWorker} )"
 
+    #[-    #... Search consequent ' '
+    pos_OffDays = get_OffDays( idxWorker )
     
-    @serCase=[]
 
-      #    end
-  end   
+    p "po_OffDayss",pos_OffDays
+#[-
+    cnt_add = 0
+    pos_OffDays.each {|days|
+      print "# seq OffDays "; p days
+      print "#     OffDays.size ";
+      p days.size
+      puts  "#   now stat (Last pos0 = '#{days[-1]}'"
+      if days.size > 2
+        cnt_add += 1
+        # set 3rd day in OffDay-seq
+#        puts  "#  Before Value  ==> '#{wrkdays[idxWorker][days[-1]]}'"
+        @wrkdays[idxWorker][days[-1]] = 'x'
+#        puts  "#  AFTER  Value  ==> '#{wrkdays[idxWorker][days[-1]]}'"
+      end
+    }
+    puts "#==== presetKoyano #{cnt_add} days Added"
+
 
+    examine()
+#    checkCase
+   
+    ## --- start , Add dsy of seqs to under day
+    # 
+    #  add_OffDays(idxWorker, pos_OffDays)
+    #-----------
+  end
+  
   #...............................
   def yoyaku(id_worker=3, preserv)
   #...............................
@@ -638,78 +738,8 @@ end
     }
   end
 
-  #.............................
-  def prepare(idx, prevdays=' '*4, nvotAvail={})
-    #.............................
-    puts "def prepare( #{idx}, #{prevdays}, #{ nvotAvail})"
 
-   # notAvail
-    unless idx < @num_workers
-      puts "prepare: 1nd param : idx '#{idx}' must be less than #{@num_workers.to_s}"
-      return false
-    end
-    if prevdays.length!=4
-      puts "prepare: 2nd param Length Not 4";
-      puts "  '#{prevdays}'"
-      return false
-    end
-    #
-    prv=prevdays.split('')
-  if @debug_ > 10
-    p prv
-  end
-    itm=Array.new
-    (0..34).each do |n|
-      if n < 4 then
-        itm[n]=prv[n]
-      else
-        itm[n]=' '
-      end
-    end
-    @wrkdays[idx]=itm
-    return true
-  end
-  
-  #.............................
-  def checked_str(num_filled)
-  #.............................
-    str_dat= num_filled.to_s
-    case num_filled
-    when 0
-      column = color_str(str_dat, 'NORMAL')
-    when 1
-      column = color_str(str_dat, 'RED')
-    when 3
-      column =color_str(str_dat, 'RED')
-    when  2   
-      column =color_str(str_dat, 'GREEN')
-    else
-      column =color_str(str_dat, 'RED')
-    end
-    column
-  end
-  
-  #..............................
-  def examine(ex_workers=[0,1,2,3], isview=true)
-  #..............................
-    puts "# def examine( #{ex_workers}, #{isview} )"
-    #  filled '2'
-#    (4..34).each do |day|
-    (4...4 + @num_days16 ).each do |day|
-=begin        
-#  26 lines skipped
-=end
-      @check_info[:daycheck][day] = cnt_filled( day )
-      @check_info[:dayview][day] = set_AttrStr( @check_info[:daycheck][day] )
-    end
-    if isview
-#      ver_show(ex_workers)
-      hor_show(ex_workers)
-    end
-    puts "# End def examine( #{ex_workers}, #{isview} )"
-  end
 
-  
   #............................
 #  def pre_set(pass_idx)
   def pre_set(idxs_workers=[0,1,2])
@@ -759,75 +789,42 @@ if @debug_ > 10
 end
   end
 
+  #.............................
+  def prepare(idx, prevdays=' '*4, nvotAvail={})
+    #.............................
+    puts "def prepare( #{idx}, #{prevdays}, #{ nvotAvail})"
 
-  def checkCase()
-   
-#=begin
-    filled_days=Array.new(5, 0)
-    (4... 4+ @num_days16).each {|d|
-      ninzuDay=@check_info[:daycheck][d]
-      filled_days[ninzuDay]+=1
-    }
-    
-    puts "Hyoka After Koyno (Filled) "
-#=begin
-#         '  0   ==>     '
-    puts "  Members   days "
-    cnt_errDays=0
-    filled_days.each_with_index {|val,idx|
-      if idx != 2
-        #    puts "  " + color_str( idx.to_s, 'RED' ) + "    ==>    " + colo _str(val.to_s, 'RED')
-        puts " " + idx.to_s + "      = " + val.to_s
-        cnt_errDays+=val
+   # notAvail
+    unless idx < @num_workers
+      puts "prepare: 1nd param : idx '#{idx}' must be less than #{@num_workers.to_s}"
+      return false
+    end
+    if prevdays.length!=4
+      puts "prepare: 2nd param Length Not 4";
+      puts "  '#{prevdays}'"
+      return false
+    end
+    #
+    prv=prevdays.split('')
+  if @debug_ > 10
+    p prv
+  end
+    itm=Array.new
+    (0..34).each do |n|
+      if n < 4 then
+        itm[n]=prv[n]
       else
-        puts " " + idx.to_s + " (OK) = " + val.to_s
+        itm[n]=' '
       end
-    }
-
-    puts "# Error (Over or Under )  = #{cnt_errDays} "
+    end
+    @wrkdays[idx]=itm
+    return true
   end
 
-  #................................
-  def presetKoyano(idxWorker, howTo=0) 
-    #..............................
-    #  howTo : how to Add OnDay
-    #         0 : OnDay set to lastday of seq 3 days
-    # not only weekly,
-    # but for General use
-    # suposed already set Dame Days
-    
-    puts "#  presetKoyano( #{idxWorker} )"
-
-    #... Search consequent ' '
-    pos_OffDays =
-      sr_offdays_array(idxWorker)
-    
-    p "po_OffDayss",pos_OffDays
-
-    cnt_add = 0
-    pos_OffDays.each {|days|
-      print "# seq OffDays "; p days
-      print "#     OffDays.size "; p days.size
-      puts  "#   now stat (Last pos0 = '#{days[-1]}'"
-      if days.size > 2
-        cnt_add += 1
-        # set 3rd day in OffDay-seq
-#        puts  "#  Before Value  ==> '#{wrkdays[idxWorker][days[-1]]}'"
-        @wrkdays[idxWorker][days[-1]] = 'x'
-#        puts  "#  AFTER  Value  ==> '#{wrkdays[idxWorker][days[-1]]}'"
-      end
-    }
-    puts "#==== presetKoyano #{cnt_add} days Added"
 
-    examine([0,1,2,3], true)
-    checkCase
-   
-    ## --- start , Add dsy of seqs to under day
-    # 
-    #  add_OffDays(idxWorker, pos_OffDays)
-    #-----------
-  end
-  
+  #
+  #   Real Actual Operation 
+  #
   #..............................
   def shift_to(idxWorker, direction=+1)
   #..............................
@@ -869,18 +866,55 @@ end
     @wrkdays[idxWorker] = strDays.split('')
   end
 
+  
+  #..............................
+  def shift_AI(idxWorker, direction=+1)
+    #..............................
+  # shift right +N, left -N
+    puts "#  def shift_to( #{idxWorker}, #{direction} )"    
+    #
+    shift_to(idx, dir)
+    prev = saveCase
+    #   others = (0...@num_workers).to_a - [ idx ]
+    (4...4+@num_days16).each do |d|
+      n = cnt_filled(d)  #, others)
+      case n
+      when 1, 0
+        if @wrkdays[3][d] == ' '
+          @wrkdays[3][d] = 'x'
+        else
+        end
+      when 3, 4
+        if @wrkdays[3][d] == 'x'
+          @wrkdays[3][d] = ' '
+        else
+        end
+      when 2
+        ;   # ok
+      else
+        ;   #  ??
+      end
+    end  # (4..).each
+    # Hyoka
+    # compareCase
+    # get Better
+  end # shift_AI
+  
+
   #................................
   def adjust(idx_to_change)
-    #................................
-    puts "\n\n-------------------"
-    puts "#  adjust( #{idx_to_change} )"
+  #..............................
+      puts "\n\n-------------------"
+      puts "#  adjust( #{idx_to_change} )"
     save_Case
     puts "Case Person #{idx_to_change}"
+    
     hor_show
+#    ver_show
     cnt_add=cnt_del=changed=cnt_ok = cnt_ok0 =cnt_offDays =  0
     (4...( @num_days16 + 4) ).each {|day|
       ##      puts "# think   day #{day}   '#{@wrkdays[ idxWorker][ day ]}'"
-      num = cnt_filled(day, [0,1,2,3])
+      num = cnt_filled(day)
       if num == 2
         cnt_ok0 += 1
       end
@@ -905,7 +939,7 @@ end
       else # 2
       end
       # to  evaluate
-      if cnt_filled(day, [0,1,2,3]) == 2
+      if cnt_filled(day) == 2
          cnt_ok += 1
       end
       case @wrkdays[idx_to_change][day]
@@ -913,17 +947,64 @@ end
         cnt_offDays += 1
       end
     }
+
+    examine()
+
+    
     puts "# RESULTadjusted"
     puts "#   #{changed} days adjusted   On #{cnt_add}  Off #{cnt_del} for Person  #{idx_to_change}"
     puts "#       OK  Before #{cnt_ok0}  ==> After #{cnt_ok} days  "
-    puts "#       Result #{cnt_ok - cnt_ok0}"
+    puts "#       Result + #{cnt_ok - cnt_ok0}"
     puts "##   OffDay is #{cnt_offDays} days"
+    #term_month = (3 .. @num_days16 + 4 - 1)
+
+    p "## Full Off before"
+    (0..3).each {|w|
+      p  @chk_workers[:FullOffDay][w]
+      get_FullOffDays(w)
+    }
+    p "## Full Off AFTER"
+    (0..3).each {|w|
+      p  @chk_workers[:FullOffDay][w]
+    }
     hor_show
+    print "===Ok==== "
+    gets
+
+#    ver_show
     load_Case
+  end  
+
+  def get_FullOffDays(idx_w)
+  puts "# def get_FullOffDays( #{idx_w} )"
+    # delete First OffDay 
+    p "##  @chk_workers[:FullOffDay]   ",       @chk_workers[:FullOffDay]
+    p "##  @chk_workers[:FullOffDay].length   ",       @chk_workers[:FullOffDay].length
+    p "### @chk_workers[:FullOffDay][idx_w]  ", @chk_workers[:FullOffDay][idx_w]
+
+    @chk_workers[:FullOffDay][idx_w].each {|days|
+      days = days[1, 100]
+    }
+    p "## Full Off AFTER"
+    p  @chk_workers[:FullOffDay][idx_w]
+    @chk_workers[:FullOffDay][idx_w].flatten!
+    p @chk_workers[:FullOffDay][idx_w]
+    tmp= @chk_workers[:FullOffDay][idx_w].reject {|day|
+      if ! (4 ... 4+@num_days16).member?(day)
+        day
+      end
+    }
+
+    @chk_workers[:FullOffDay][idx_w] = tmp
+    
+    print  "##  ===> @chk_workers[:FullOffDay][idx_w]  #{idx_w} =  ",   @chk_workers[:FullOffDay][idx_w]
+    print  "##  ===> @chk_workers[:FullOffDay][idx_w]  #{idx_w} =  ",   tmp
   end
+  
 
-  #..........................
-  def think(idxWorker)
+  #....................
+  #[- ......
+  def think(idxWorker) 
   #..........................
     
     puts "#    def think( #{idxWorker} )"
@@ -932,58 +1013,71 @@ end
 =begin
 #  3 lines skipped
 =end      
-      if cnt_filled(day) < 2 &&  isDayOff(idxWorker, day)
+      if cnt_filled(day) < 2 &&  isOffDay( @wrkdays[ idxWorker][ day ] )
         puts " # ...> Tar Tar "
       end
     }
   end
 
-  #-----------------------------
-  def save_Case(isInitState=false)
-    puts "# save_Case  size #{@isInitState}"    
-    #-----------------------------
-    if isInitState
-      @initCase=Marshal.dump( @wrkdays )
-    else
-      @prevCase = Marshal.dump( @wrkdays )
-    end
-#    @serCase << @preCase
-  end
- 
-  #-----------------------------
-#  def load_Case(saveNow=false)
-  def load_Case(isInitState=false)
-    #----------------------------
-    puts "#  load_Case(#{isInitState})"
-    if isInitState
-      if @initCase
-        @wrkdays = Marshal.load(@initCase)
-      end
-    else             
-      if @prevCase
-        @wrkdays = Marshal.load(@prevCase)
-      end
-    end
-    return
-    print  "# load_Case "
-    if ! @serCase.empty?
-      puts " size #{@serCase.size}"
-#=begin      
-#      if saveNow
-#        nowCase=Marshal.dump( @wrkdays )
-#      end
-      @wrkdays = Marshal.load(@serCase.pop)
-      #
-#      if saveNow
-#        @serCase << nowCase
-#      end
+
+  #
+  #   check & Hyouka
+  #
+  
+  #..............................
+    def examine(workers=[0,1,2,3])
+    #..............................
+#=begin    
+    puts "# def examine( #{workers} )"
 #=end
+    #  filled '2'
+    #    (4..34).each do |day|
+    # for days OK?
+
+    (0 ... 4 + @num_days16 ).each { |day|
+      @chk_Place[:numDay][day] = cnt_filled( day )
+      @chk_Place[:isOK][day] = ( cnt_filled( day ) == @num_workers_p_day )
+      @chk_Place[:dayView][day] = str_Attr ( cnt_filled( day ))
+    }
+
+    # between n.16th --> n_1.15th  
+#    (4 ... 4+ @num_days16 ).each { |day|
+    @chk_Place[:OK] = @chk_Place[:numDay][4, @num_days16].count( 2 )
+      #
+    @chk_Place[:Under] = @chk_Place[:numDay][4, @num_days16].count( 1 )
+    @chk_Place[:Under] += @chk_Place[:numDay][4, @num_days16].count( 0 )
+    #
+    @chk_Place[:Over] = @chk_Place[:numDay][4, @num_days16].count( 3 )
+    @chk_Place[:Over] += @chk_Place[:numDay][4, @num_days16].count( 4 )
+    if @chk_Place[:OK] + @chk_Place[:Under] + @chk_Place[:Over] != @num_days16
+      puts "############# <<def examine(workers=[0,1,2,3]) >>====="
+      puts "# Prog Error "
+      puts "##  @chk_Place[:OK] + @chk_Place[:Under] + @chk_Place[:Over] != @num_days16"
+      puts "##  #{@chk_Place[:OK]} + #{@chk_Place[:Under]} + #{@chk_Place[:Over]} != #{@num_days16}"
+      puts "############# << def examine(workers=[0,1,2,3]) >> ====="
+#      exit 1
+    end  
+    workers.each do |w|
+      puts " workers = #{w}"  
+      @chk_workers[:OffDay][w] = 0
+      @chk_workers[:FullOffDay][w] = []
+      @chk_workers[:OnDay][w] = 0
+      @chk_workers[:OnDayAll][w] = 0
+      (4 ... 4 + @num_days16 ).each do |day|
+        @chk_workers[:OnDay][w] += 1  if isOnDay( @wrkdays[w][day] )
+        @chk_workers[:OffDay][w] += 1  if isOffDay( @wrkdays[w][day] )
+        @chk_workers[:OnDayAll][w] += 1  if isOnDayAll( @wrkdays[w][day] )
+      end
+      ##[-      @chk_workers[:FullOffDays][w] = []   @wrkdays[w])
+      @chk_workers[:FullOffDay][w] = get_OffDays( w )
+      print "\n#Full Off No.#{w}  '", @chk_workers[:FullOffDay][w], "'\n\n"      
     end
-    puts ''
+
+=begin
+#  1 lines skipped
+=end
   end
+
 end
+
 #--- End of Class ---
-__END__
-# followng lines omitted
-#  15 lines skipped by __END__
-#__END__
diff --git a/control_helper.rb b/control_helper.rb
index d026912..f7cdc7e 100644
--- a/control_helper.rb
+++ b/control_helper.rb
@@ -1,3 +1,4 @@
+# coding: utf-8
 module ControlHelper
 
   #
@@ -14,6 +15,7 @@ module ControlHelper
   #----- Initailze -------  
   def init_InitVarCon(members, date)
   #-----------------------
+    @test_ = 1
     #--- Constant ----
     @num_workers = members
     @num_workers_p_day = 2            # Teiin
@@ -42,7 +44,7 @@ module ControlHelper
     #
     #  view and control # separate?!
     #   @viewsdays=Array.new( @num_workers + 1, Array.new(35, ' ') )
-    #   @cnt_checks=Array.new( @num_workers - 1, Array.new(2, 0) )
+　    #   @cnt_checks=Array.new( @num_workers - 1, Array.new(2, 0) )
 
 
     # === Working Data ===    
@@ -143,6 +145,7 @@ module ControlHelper
     day =~ /^[#{@day_ON}]$/i   # XxAaBb   , Dd
   end
 
+
   #.................................
   def isOnDayAll(day)     # All OnDay including other Place
   #.................................
@@ -155,9 +158,9 @@ module ControlHelper
 
   
   # 
-  #.................................................
+  #............................
   def start_p( fourDays )
-    #.................................................
+    #..........................
     if isOffDay( fourDays[3] )    # _|
       if isOffDay( fourDays[2] )    #  0 1 2
         p_template=0              ##  __| X X X
@@ -212,29 +215,39 @@ module ControlHelper
 =end
   
   #............................... 
-  def sr_offdays_array(idxWorker)
-  #...............................
+  def get_OffDays(idxWorker)
+    #...............................
+    # return Array ofcontinued holidays 
     seqs_pos=[]
-    num_seq=0
-
+    
+    days = []
+    num_days = 0
+if @test_  > 0    
+  print '#... @wrkdays[idxWorker] ',@wrkdays[idxWorker]
+  puts
+end
+                       
     (0..@num_days16+4).each{|nth_day|
-#      if @wrkdays[idxWorker][nth_day]==' '
       if isOffDay( @wrkdays[idxWorker][nth_day] )
-        num_seq+=1
+        days << nth_day
+#        num_seq+=1
       else
-        if num_seq > 1
-          seqs=(0...num_seq).map {|n|
-            nth_day - n - 1
-          }.sort
-#if @debug_           
-#          print "seqs '",  seqs, "'\n"
-#end          
-          seqs_pos << seqs
-          num_seq=0
+        if num_days > 1
+#          seqs=(0...num_seq).map {|n|
+#            nth_day - n - 1
+#          }.sort
+#          seqs_pos << seqs
+          seq_pos << days
+          days = []
+          num_days=0
         end
       end
     }
-##    print "#... Off Seq ";seqs_pos
+    if num_days > 1
+      seqs_pos << days
+    end
+    print "#... Off Seq ",seqs_pos
+    puts
     seqs_pos
   end
 
diff --git a/corelogic.rb b/corelogic.rb
index e905840..2db4082 100755
--- a/corelogic.rb
+++ b/corelogic.rb
@@ -29,7 +29,8 @@ Teiin = 2
 
 #  -- set last 4 days of prev month 
 #  def prepare(idx, prevdays=' '*4, nvotAvail={})
-# 
+#
+          .
 
 class Yotei
 
@@ -50,9 +51,9 @@ include './View'
   #  @wrkdays
   #  @cnt_hecks
   
-  #.................................................
+  #................................
   def initialize(members=4, fakeDate=nil )
-  #.................................................
+  #...............................
         # @month_16
     # @num_days16..[28/29/30/31]
 
@@ -80,7 +81,7 @@ include './View'
   #------------------------
   #  preparation
   #................................
-  def presetKoyano(idxWorker, howTo=0) 
+   def presetKoyano(idxWorker, howTo=0) 
     #..............................
     #  howTo : how to Add OnDay
     #         0 : OnDay set to lastday of seq 3 days
@@ -90,15 +91,16 @@ include './View'
     
     puts "#  presetKoyano( #{idxWorker} )"
 
-#[-    #... Search consequent ' '
-    pos_OffDays = sr_offdays_array( idxWorker )
+    #[-    #... Search consequent ' '
+    pos_OffDays = get_OffDays( idxWorker )
     
     p "po_OffDayss",pos_OffDays
-
+#[-
     cnt_add = 0
     pos_OffDays.each {|days|
       print "# seq OffDays "; p days
-      print "#     OffDays.size "; p days.size
+      print "#     OffDays.size ";
+      p days.size
       puts  "#   now stat (Last pos0 = '#{days[-1]}'"
       if days.size > 2
         cnt_add += 1
@@ -427,8 +429,7 @@ end
   end
   
 
-  #....................
-  #[- ......
+  #....................  #[- ......
   def think(idxWorker) 
   #..........................
     
@@ -480,23 +481,24 @@ end
       puts "############# <<def examine(workers=[0,1,2,3]) >>====="
       puts "# Prog Error "
       puts "##  @chk_Place[:OK] + @chk_Place[:Under] + @chk_Place[:Over] != @num_days16"
-      puts "##  #{@chk_Place[:OK]} + #{@chk_Place[:Under]} + #{@chk_Place[:Over]} != #{@num_days16}"
+      puts "##  #{@chk_Place[:OK]} +a #{@chk_Place[:Under]} + #{@chk_Place[:Over]} != #{@num_days16}"
       puts "############# << def examine(workers=[0,1,2,3]) >> ====="
 #      exit 1
-    end  
+    end
+    
     workers.each do |w|
       puts " workers = #{w}"  
       @chk_workers[:OffDay][w] = 0
       @chk_workers[:FullOffDay][w] = []
       @chk_workers[:OnDay][w] = 0
       @chk_workers[:OnDayAll][w] = 0
-      (3 ... 4 + @num_days16 ).each do |day|
+      (4 ... 4 + @num_days16 ).each do |day|
         @chk_workers[:OnDay][w] += 1  if isOnDay( @wrkdays[w][day] )
         @chk_workers[:OffDay][w] += 1  if isOffDay( @wrkdays[w][day] )
         @chk_workers[:OnDayAll][w] += 1  if isOnDayAll( @wrkdays[w][day] )
       end
       ##[-      @chk_workers[:FullOffDays][w] = []   @wrkdays[w])
-      @chk_workers[:FullOffDay][w] = sr_offdays_array( w )
+      @chk_workers[:FullOffDay][w] = get_OffDays( w )
       print "\n#Full Off No.#{w}  '", @chk_workers[:FullOffDay][w], "'\n\n"      
     end
 
diff --git a/rep-module.rb b/rep-module.rb
deleted file mode 100755
index 2c3422c..0000000
--- a/rep-module.rb
+++ /dev/null
@@ -1,46 +0,0 @@
-#!/usr/bin/env ruby
-# coding: utf-8
-
-files = ARGV
-# [ 'FL1 with include':   ,
-#   'FL2 newly made'  :   ,
-#   'FL3 require FL2' :
-#  ]
-##
-=begin
-FL1
-line1
-line2
-# Here replaced
-#---------------
-include 'moduleX'
-#-- Replace from Here with moduleX--
-#include 'moduleX'
-   ::
-#module ModuleX   # comment 
-   ::
-   ::
-#end              # comment
-#-- Replace until End of moduleX ---
-   :
-line_X
-   :
-end
-
-=end
-
-
-lines=ARGF.read
-lines.each_line do |l|
-  if l =~ /^include[ \t]+'([^']+)'/
-    file = $1
-    puts "## <#{file}> included"
-#    ARGV = [ file ]
-#    print inc_data  = ARGF.reaf
-    puts "## <#{file}> included"  
-  else
-    print l
-  end
-  #
-  
-end
diff --git a/test_helper.rb b/test_helper.rb
index 294d9cc..5b41b6f 100644
--- a/test_helper.rb
+++ b/test_helper.rb
@@ -21,6 +21,10 @@ module TestHelper
   end
 
   def testMain()
+    presetKoyano(3)
+    if ! are_you_ok?('continue? Y/N')
+      exit 1
+    end
     adjust(0)
   end
 end
diff --git a/view.rb b/view.rb
index e0775f4..17d33d5 100644
--- a/view.rb
+++ b/view.rb
@@ -81,8 +81,14 @@ module View
      #   puts "16--31  '#{hdr}'"
      hdr=hdr+ "1 . . . + . . . . 10. . . . 15"
      guide= (' 1'..' 9').to_a.join + ' + '
-     guide[0]=''
-     guide= ". . . . |" + guide*3 +'.'
+     guide[0]=''   #[-     
+     scale = " DayIdx |" + '0 1 2 3 |'
+     scale = scale + '4 5 6 7 8 9 0'
+     scale = scale + ' . . . . + . . . . 2'
+     scale = scale + ' . . . . + . . . . 3'
+     scale = scale + ' . . . . + .'
+     
+     guide = ". . . . |" + guide*3 +'.'
      #  when Smafo
      #      puts guide
      #      puts hdr
@@ -117,11 +123,11 @@ module View
    end
    if checkview
      examine()
-     #      print " @chk_Place[:dayView] ='", @chk_Place[:dayView], "'\n"
-     #      print " @chk_Place[:dayView][0] ='", @chk_Place[:dayView][0], "'\n"
-     #      print " @chk_Place[:dayView][1] ='", @chk_Place[:dayView][1], "'\n"
-     #      print " @chk_Place[:dayView][2] ='", @chk_Place[:dayView][2], "'\n"
-     #      print " @chk_Place[:dayView][3] ='", @chk_Place[:dayView][3], "'\n"
+           print "+ @chk_Place[:dayView] ='", @chk_Place[:dayView], "'\n"
+          print "+ @chk_Place[:dayView][0] ='", @chk_Place[:dayView][0], "'\n"
+          print "+ @chk_Place[:dayView][1] ='", @chk_Place[:dayView][1], "'\n"
+          print "+ @chk_Place[:dayView][2] ='", @chk_Place[:dayView][2], "'\n"
+           print "+ @chk_Place[:dayView][3] ='", @chk_Place[:dayView][3], "'\n"
      
      #              .join(filler) + '_|'
      dat = @chk_Place[:dayView][0, 4].join(filler) + '_|'
@@ -131,6 +137,7 @@ module View
      #      puts dat                      # when Smafo
      puts " check  |#{dat}"    # when PC
    end
+   puts scale
   end  
   
   #.............................
